# .github/workflows/generate_gifs.yml

name: Generate and Sync Video GIFs for README

on:
  push:
    branches:
      - main
    paths:
      - 'media/videos/tests/1080p60/**.mp4'
      - '.github/workflows/generate_gifs.yml'

jobs:
  build_and_sync_gifs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Check for Conversion Task
        id: check_for_conversion
        run: |
          echo "Checking for Added or Modified MP4 files..."
          if git diff --name-status ${{ github.event.before }} ${{ github.event.after }} -- "media/videos/tests/1080p60" | grep -q -E "^(A|M).*\.mp4"; then
            echo "Conversion is needed. Setting output 'needs_conversion=true'."
            echo "needs_conversion=true" >> $GITHUB_OUTPUT
          else
            echo "No conversion needed (only deletions or no changes)."
            echo "needs_conversion=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup FFmpeg
        if: steps.check_for_conversion.outputs.needs_conversion == 'true'
        run: |
          echo "Installing FFmpeg because new/modified videos were detected."
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Sync GIF files based on changes
        run: |
          VIDEO_DIR="media/videos/tests/1080p60"
          GIF_DIR="media/videos/tests/1080p60/gifs"
          mkdir -p $GIF_DIR
          
          git diff --name-status ${{ github.event.before }} ${{ github.event.after }} -- "$VIDEO_DIR" | while read -r status file; do
            if [[ "$file" == *.mp4 ]]; then
              filename=$(basename "$file" .mp4)
              gif_path="$GIF_DIR/$filename.gif"

              if [[ "$status" == "A" || "$status" == "M" ]]; then
                echo "Action: GENERATE for $file"
                ffmpeg -i "$file" -vf "fps=10,scale=480:-1:flags=lanczos" -y "$gif_path"
              
              elif [[ "$status" == "D" ]]; then
                echo "Action: DELETE for $file"
                if [[ -f "$gif_path" ]]; then
                  rm "$gif_path"
                fi
              fi
            fi
          done

      - name: Update README with current video list
        run: |
          VIDEO_DIR="media/videos/tests/1080p60"
          GIF_DIR="media/videos/tests/1080p60/gifs"
          README_FILE="README.md"
          MARKDOWN_OUTPUT=""
          
          for video in $(ls -1 $VIDEO_DIR/*.mp4 2>/dev/null | sort); do
            filename=$(basename "$video" .mp4)
            if [[ -f "$GIF_DIR/$filename.gif" ]]; then
              gif_path="$GIF_DIR/$filename.gif"
              MARKDOWN_OUTPUT+="### $filename\n[![Preview of $filename]($gif_path)](./$video)\n\n"
            fi
          done

          awk -v gifs="$MARKDOWN_OUTPUT" '/<!-- START_GIFS -->/{print;print gifs;f=1} /<!-- END_GIFS -->/{f=0} !f{print}' $README_FILE > tmp_readme && mv tmp_readme $README_FILE
          echo "README.md has been regenerated."

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add media/videos/tests/1080p60/
          git add README.md
          if ! git diff --staged --quiet; then
            git commit -m "docs: Sync video GIFs and update README [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi