# .github/workflows/generate_gifs.yml

name: Generate Video GIFs for README

# Controls when the action will run.
# It triggers on a push event to the 'main' branch,
# but ONLY if files in 'media/videos/tests/1080p60/' were changed.
on:
  push:
    branches:
      - main
    paths:
      - 'media/videos/tests/1080p60/**.mp4'

jobs:
  build_gifs:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout Repo
        uses: actions/checkout@v3

      # 2. Set up FFmpeg (a powerful video/audio converter)
      - name: Setup FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # 3. The main script to generate GIFs and update the README
      - name: Generate GIFs and Update README
        run: |
          # Define the source and output directories
          VIDEO_DIR="media/videos/tests/1080p60"
          GIF_DIR="media/videos/tests/1080p60/gifs" # We'll create a dedicated subfolder for GIFs
          README_FILE="README.md"

          # Create the GIF output directory if it doesn't exist
          mkdir -p $GIF_DIR

          # A variable to hold the markdown for all our GIFs
          MARKDOWN_OUTPUT=""

          # Loop through each .mp4 file in the video directory
          for video in $VIDEO_DIR/*.mp4; do
            # Get the base filename without the extension (e.g., "test1")
            filename=$(basename "$video" .mp4)
            gif_path="$GIF_DIR/$filename.gif"

            echo "Converting $video to $gif_path..."

            # Use ffmpeg to convert the video to a GIF.
            # The `-vf "fps=10,scale=480:-1"` part is crucial:
            #   - fps=10: Sets the frame rate to 10 FPS (keeps file size down)
            #   - scale=480:-1: Resizes the width to 480px and auto-adjusts height
            ffmpeg -i "$video" -vf "fps=10,scale=480:-1:flags=lanczos" -y "$gif_path"

            # Add the markdown for this GIF to our output variable
            # This creates a link to the original high-quality MP4 file
            MARKDOWN_OUTPUT+="### $filename\n[![Preview of $filename]($gif_path)](./$video)\n\n"
          done

          # Use a temporary file to safely replace the block in the README
          # This is more robust than using `sed` directly for multi-line replacements
          awk -v gifs="$MARKDOWN_OUTPUT" '
            /<!-- START_GIFS -->/ { print; print gifs; f=1 }
            /<!-- END_GIFS -->/ { f=0 }
            !f { print }
          ' $README_FILE > tmp_readme && mv tmp_readme $README_FILE

          echo "README.md has been updated."

      # 4. Commit the new GIFs and the updated README back to the repo
      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add media/videos/tests/1080p60/gifs/*
          git add README.md
          # Check if there are any changes to commit
          if ! git diff --staged --quiet; then
            # The [skip ci] in the commit message is important!
            # It tells GitHub Actions not to trigger this workflow again from this commit.
            git commit -m "docs: Auto-generate video GIFs [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi